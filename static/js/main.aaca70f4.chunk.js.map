{"version":3,"sources":["base.js","Auth.js","Home.js","Login.js","PrivateRoute.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","AuthContext","React","createContext","AuthProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","currentUser","setCurrentUser","useEffect","auth","onAuthStateChanged","react_default","a","createElement","Provider","value","Home","Setname","handleLogin","useCallback","asyncToGenerator","regenerator_default","mark","_callee","event","name","wrap","_context","prev","next","preventDefault","target","elements","database","ref","push","on","snapshot","state","val","t0","alert","stop","_x","apply","this","arguments","useContext","className","onSubmit","type","placeholder","onclick","class","withRouter","history","_ref2","_event$target$element","email","password","signInWithEmailAndPassword","react_router","to","PrivateRoute","RouteComponent","component","rest","objectWithoutProperties","assign","render","routeProps","Navbar","id","href","onClick","signOut","Component","App","Auth_AuthProvider","react_router_dom","src_Navbar","src_PrivateRoute","exact","path","Login","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaca70f4.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport 'firebase/database'\n\nconst app = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\n});\n\nexport default app;\n","import React, { useEffect, useState } from \"react\";\nimport app from \"./base.js\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    app.auth().onAuthStateChanged(setCurrentUser);\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import app from \"./base\";\nimport React, { useCallback, useContext , useState} from \"react\";\nimport { withRouter, Redirect } from \"react-router\";\nimport { AuthContext } from \"./Auth.js\";\nimport \"./App.css\"\n\n\n// const Home = () => {\nconst Home = () => {\n\n  const [name, Setname] = useState('')\n  \n  \n  const handleLogin = useCallback(\n    async event => {\n      event.preventDefault();\n      const { name} = event.target.elements;\n      try {\n        await app\n          .auth()\n          let ref=app.database().ref(\"Names\");\n          ref.push(name.value);\n          \n            let reff =app.database().ref('Names');\n            reff.on('value',snapshot =>{\n              const state= snapshot.val();\n              Setname(state);})\n              \n            \n            \n         \n        \n      } catch (error) {\n        alert(\"Hata. Lütfen tekrar deneyiniz!\");\n      }\n    },\n  \n  );\n\n  const { currentUser } = useContext(AuthContext);\n\n  // if (currentUser) {\n  //   return <Redirect to=\"/\" />;\n  // }\n\n\n\n\n\n  return (\n    <div>\n    <div className=\"container card \">\n      \n    <form onSubmit={handleLogin}>\n      <div className=\"form-group\">\n      <label><b>\n        Eklemek İstediğiniz Ad-Soyadı Yazınız:</b>\n        <input name=\"name\" className=\"form-control\" type=\"text\" placeholder=\"Emre Kaan Durmuş\" />\n      </label>\n      </div>\n      <button type=\"submit\">Kaydet</button>\n    </form>\n  </div>\n  <hr></hr>\n  <div className=\"w3-container\">\n                \n                <ul className=\"w3-ul w3-card-4\">\n                  <li className=\"w3-display-container\">Emre Kaan Durmuş <span onclick=\"this.parentElement.style.display='none'\" class=\"w3-button w3-transparent w3-display-right\">Sil</span></li>\n                  <li className=\"w3-display-container\">Kaan Emre Durmuş <span onclick=\"this.parentElement.style.display='none'\" class=\"w3-button w3-transparent w3-display-right\">Sil</span></li>\n                  <li className=\"w3-display-container\">Durmuş Kaan Emre <span onclick=\"this.parentElement.style.display='none'\" class=\"w3-button w3-transparent w3-display-right\">Sil</span></li>\n                  \n                \n                  </ul>\n              </div>\n\n    </div>\n  );\n};\n\n\n\nexport default Home;\n","import React, { useCallback, useContext } from \"react\";\nimport { withRouter, Redirect } from \"react-router\";\nimport app from \"./base.js\";\nimport { AuthContext } from \"./Auth.js\";\nimport \"./App.css\"\n\nconst Login = ({ history }) => {\n  const handleLogin = useCallback(\n    async event => {\n      event.preventDefault();\n      const { email, password } = event.target.elements;\n      try {\n        await app\n          .auth()\n          .signInWithEmailAndPassword(email.value, password.value);\n        history.push(\"/\");\n      } catch (error) {\n        alert(\"Girilen mail adresi ile şifre uyuşmamaktadır. Lütfen tekrar deneyiniz!\");\n      }\n    },\n    [history]\n  );\n\n  const { currentUser } = useContext(AuthContext);\n\n  if (currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"container card \">\n      \n      <form onSubmit={handleLogin}>\n        <div className=\"form-group\">\n        <label><b>\n          Mail Adresi Giriniz:</b>\n          <input name=\"email\" className=\"form-control\" type=\"email\" placeholder=\"test@infomail.com\" />\n        </label>\n        </div>\n        <div className=\"form-group\">\n        <label>\n        <b>\n          Şifrenizi Giriniz:</b>\n          <input name=\"password\" className=\"form-control\" type=\"password\" placeholder=\"123456\" />\n        </label>\n        </div>\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(Login);\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"./Auth\";\n\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\n  const {currentUser} = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render={routeProps =>\n        !!currentUser ? (\n          <RouteComponent {...routeProps} />\n        ) : (\n          <Redirect to={\"/login\"} />\n        )\n      }\n    />\n  );\n};\n\n\nexport default PrivateRoute","import React, { Component } from 'react'\r\nimport app from \"./base\"\r\nimport \"./App.css\"\r\n\r\n class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <navbar className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container\"><a id=\"NavRFP\" className=\"navbar-brand\">React-Firebase-Project</a>\r\n                <a className=\"Nav-Link\" href=\"./\" id=\"Logout\" onClick={() => app.auth().signOut()}>Çıkış</a>\r\n                </div>\r\n            </navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\n\nimport { AuthProvider } from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport Navbar from \"./Navbar\";\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n        <div>\n          <Navbar></Navbar>\n          <PrivateRoute exact path=\"/\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}